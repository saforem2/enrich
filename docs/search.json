[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "enrich",
    "section": "",
    "text": "rich ü§ù logging\n\nenrich provides a generalized RichHandler that allows for rich style highlights without line breaks\n\n\n\n\n\n\n\n\n\n\n\n\nFigure¬†1: dark\n\n\n\n\n\n¬†\n\n\n\n\n\n\n\n\nFigure¬†2: light\n\n\n\n\n\n\n\n\nü§∑üèª‚Äç‚ôÇÔ∏è Ambivalent\n\n\n\n\nambivalent\n\n\n\n\n\nambivalent-transparent\n\n\n\n\n\nüòª Catpuccin Latte\n\n \n\n\n\nüòà Doom One"
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "enrich",
    "section": "Setup",
    "text": "Setup\n\nlogging.config.dictConfig(...):\nimport yaml\nwith Path('logconf.yaml').open('r') as stream:\n    config = yaml.load(stream, Loader=yaml.FullLoader)\nlog_config = logging.config.dictConfig(config)\nlog = logging.getLogger(__name__)\nlog.setLevel('INFO')\nWhere logconf.yaml:\n---\n# logconf.yaml\nhandlers:\n  term:\n    class: enrich.handler.RichHandler\n    show_time: true\n    show_level: true\n    enable_link_path: false\n    level: DEBUG\nroot:\n  handlers: [term]\ndisable_existing_loggers: false\n...\n\n\n\n\nOriginal README"
  },
  {
    "objectID": "index.html#original-readme",
    "href": "index.html#original-readme",
    "title": "enrich",
    "section": "Original README",
    "text": "Original README"
  },
  {
    "objectID": "index.html#console-with-redirect-support",
    "href": "index.html#console-with-redirect-support",
    "title": "enrich",
    "section": "Console with redirect support",
    "text": "Console with redirect support\nOur Console class adds one additional option to rich.Console in order to redirect sys.stdout and sys.stderr streams using a FileProxy.\nfrom enrich.console import Console\nimport sys\n\nconsole = Console(\n    redirect=True,  # &lt;-- not supported by rich.console.Console\n    record=True)\nsys.write(\"foo\")\n\n# this assert would have passed without redirect=True\nassert console.export_text() == \"foo\""
  },
  {
    "objectID": "index.html#console-with-implicit-soft-wrapping",
    "href": "index.html#console-with-implicit-soft-wrapping",
    "title": "enrich",
    "section": "Console with implicit soft wrapping",
    "text": "Console with implicit soft wrapping\nIf you want to produce fluid terminal output, one where the client terminal decides where to wrap the text instead of the application, you can now tell the Console constructor the soft_wrap preference.\nfrom enrich.console import Console\nimport sys\n\nconsole = Console(soft_wrap=True)\nconsole.print(...)  # no longer need to pass soft_wrap to each print"
  },
  {
    "objectID": "index.html#console.print-can-also-deal-with-ansi-escapes",
    "href": "index.html#console.print-can-also-deal-with-ansi-escapes",
    "title": "enrich",
    "section": "Console.print can also deal with ANSI escapes",
    "text": "Console.print can also deal with ANSI escapes\nExtends Rich Console to detect if original text already had ANSI escapes and decodes it before processing it. This solves the case where printing output captured from other processes that contained ANSI escapes would brake. upstream-404"
  },
  {
    "objectID": "index.html#soft-wrapping-logger",
    "href": "index.html#soft-wrapping-logger",
    "title": "enrich",
    "section": "Soft-wrapping logger",
    "text": "Soft-wrapping logger\nRich logger assumes that you always have a fixed width console and it does wrap logged output according to it. Our alternative logger does exactly the opposite: it ignores the columns of the current console and prints output using a Console with soft wrapping enabled.\nThe result are logged lines that can be displayed on any terminal or web page as they will allow the client to decide when to perform the wrapping.\nimport logging\nfrom enrich.logging import RichHandler\n\nFORMAT = \"%(message)s\"\nlogging.basicConfig(\n    level=\"NOTSET\", format=FORMAT, datefmt=\"[%X]\", handlers=[RichHandler()]\n)\n\nlog = logging.getLogger(\"rich\")\nlog.info(\"Text that we do not want pre-wrapped by logger: %s\", 100 * \"x\")"
  },
  {
    "objectID": "index.html#appendix",
    "href": "index.html#appendix",
    "title": "enrich",
    "section": " Appendix",
    "text": "Appendix\n\n\n\n\n\n\n   Status\n\n\n\n\n\n\n\nLast Updated: 01/27/2024 @ 09:59:29\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure¬†1: dark\nFigure¬†2: light\nambivalent\nambivalent-transparent"
  }
]